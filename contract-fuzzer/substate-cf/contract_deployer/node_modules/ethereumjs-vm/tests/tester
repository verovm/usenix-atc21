#!/usr/bin/env node
const argv = require('minimist')(process.argv.slice(2))
const async = require('async')
const tape = require('tape')
const path = require('path')
const testing = require('ethereumjs-testing')
const skip = [
  'CreateHashCollision', // impossible hash collision on generating address
  'SuicidesMixingCoinbase', // sucides to the coinbase, since we run a blockLevel we create coinbase account.
  'TransactionMakeAccountBalanceOverflow',
  'RecursiveCreateContracts',
  'sha3_bigSize',
  'createJS_ExampleContract', // creates an account that already exsists
  'mload32bitBound_return',
  'mload32bitBound_return2',
  'QuadraticComplexitySolidity_CallDataCopy', // tests hash collisoin, sending from a contract
  'Call50000', // slow
  'Call50000_ecrec', //slow
  'Call50000_identity', //slow
  'Call50000_identity2', //slow
  'Call50000_sha256', //slow
  'Call50000_rip160', //slow
  'Call50000bytesContract50_1', //slow
  'Call50000bytesContract50_2',
  'Callcode50000', //slow
  'Return50000', //slow
  'Return50000_2', //slow
  'uncleBlockAtBlock3AfterBlock3',
  'ForkUncle', // correct behaviour unspecified (?)
  'UncleFromSideChain' //same as ForkUncle, the TD is the same for two diffent branches so its not clear which one should be the finally chain
]

if (argv.r) {
  randomized(argv.r, argv.v)
} else if (argv.s) {
  runTests('state', argv)
} else if (argv.v) {
  runTests('vm', argv)
} else if (argv.b) {
  runTests('blockchain', argv)
} else if (argv.j) {
  var runner = require('./jitVMTestRunner.js').bind(this, argv)
  var tests = testing.getTests('vm', argv)
  testing.runTests(runner, tests, skip)
} else if (argv.a) {
  runAll()
}

//randomized tests
//returns 1 if the tests fails
//returns 0 if the tests succeds
function randomized(stateTest) {
  const stateRunner = require('./stateRunner.js')
  var errored = false

  tape.createStream({
    objectMode: true
  }).on('data', function (row) {
    if (row.ok === false && !errored) {
      errored = true
      process.stdout.write('1')
      process.exit()
    }
  }).on('end', function () {
    process.stdout.write('0')
  })

  try {
    stateTest = JSON.parse(stateTest)
  } catch (e) {
    console.error('invalid json')
    process.exit()
  }

  var keys = Object.keys(stateTest)
  stateTest = stateTest[keys[0]]

  tape('', function (t) {
    stateRunner({}, stateTest, t, t.end)
  })
}

function runMiscTests() {}

function runTests(name, args, cb) {
  var runner = require('./' + name + 'Runner.js').bind(this, args)
  var tests = testing.getTests(name, args)
  testing.runTests(runner, tests, tape, skip, cb)
}

function runAll() {
  require('./tester.js')
  require('./cacheTest.js')
  require('./genesishashes.js')
  async.series([
    runTests.bind(this, 'blockchain', {}),
    runTests.bind(this, 'state', {}),
    runTests.bind(this, 'vm', {})
  ])
}
